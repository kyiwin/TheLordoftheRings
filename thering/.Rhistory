dbReadTable(db, "electricity_egauge_hours")
library(dplyr)
dbListFields(db, "electricity_egauge_hours")
#tbl(db, "electricity_egauge_hours(university.electricity_egauge_hours")
library(dplyr)
dbListTables(db, "electricity_egauge_hours")
#tbl(db, "electricity_egauge_hours(university.electricity_egauge_hours")
library(dplyr)
dbListResults(db, "electricity_egauge_hours")
#tbl(db, "electricity_egauge_hours(university.electricity_egauge_hours")
library(dplyr)
View(db, "electricity_egauge_hours")
#tbl(db, "electricity_egauge_hours(university.electricity_egauge_hours")
library(dplyr)
View(db, "electricity_egauge_hours")
tbl(db, "electricity_egauge_hours")
df_postgres <- dbGetQuery(db, "select * from electricity_egauge_hours")
summary(df_postgres)
db <- DBI::dbConnect(pgdrv,dbname="postgres",
host="dataport.cloud", port=5434,
user='RNdx4PTH9jE7',
password = "EXFtkguFXnsy")
DBI::dbWriteTable(db,"electricity_egauge_hours")
dbReadTable(db)
dbReadTable(db)
dbExistsTable(db, "electricity_egauge_hours" )
dbReadTable(db, "electricity_egauge_hours")
dbExistsTable(db, "electricity_egauge_hours" )
pgdrv <- dbDriver(drvName = "PostgreSQL")
db <- DBI::dbConnect(pgdrv,dbname="postgres",
host="dataport.cloud", port=5434,
user='RNdx4PTH9jE7',
password = "EXFtkguFXnsy")
dbExistsTable(db, "electricity_egauge_hours" )
dbListTables(db)
db <- DBI::dbConnect(pgdrv,dbname="postgres",
host="dataport.cloud", port=5434,
user='RNdx4PTH9jE7',
password = "EXFtkguFXnsy")
db <- DBI::dbConnect(pgdrv,dbname="postgres",
host="dataport.cloud", port=5434,
user='RNdx4PTH9jE7',
password = "EXFtkguFXnsy")
dbListFields(db, "electricity_egauge_hours")
library(dplyr)
View(db, "electricity_egauge_hours")
install.packages("googleVis")
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
knitr::opts_chunk$set(echo = TRUE)
library(googleVis)
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
install.packages("devtools")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
install.packages("devtools")
install.packages("devtools")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("bradleyboehmke/harrypotter")
library(tidyverse)      # data manipulation & plotting
install.packages("tidyverse")
library("tidyverse", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(tidyverse)      # data manipulation & plotting
library(stringr)        # text cleaning and regular expressions
library(tidytext)       # provides additional text mining functions
install.packages("tidytext")
library(tidyverse)      # data manipulation & plotting
library(stringr)        # text cleaning and regular expressions
library(tidytext)       # provides additional text mining functions
library(harrypotter)    # provides the first seven novels of the Harry Potter series
philosophers_stone
philosophers_stone[1:3]
philosophers_stone[2:3]
philosophers_stone[0:3]
philosophers_stone[0:7]
order_of_the_phoenix[1]
text_tb <- tibble(chapter = seq_along(philosophers_stone), text = philosophers_stone)
text_tb
test_tb %>%
unnest_tokens(word, text)
text_tb
test_tb %>%
unnest_tokens(word, text)
text_tb %>%
unnest_tokens(word, text)
len(philosophers_stone)
length(philosophers_stone)
length(philosophers_stone[0:17])
length(philosophers_stone)
length(philosophers_stone[1])
(philosophers_stone[1])
title <- c ("Philosopher's Stone", "Chamber of Secrets", "Prisoner of Azkaban", "Goblet of Fire", "Order of the Phoenix", "Half-Blood Prince", "Deathly Hallows")
books <- list(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban, goblet_of_fire, order_of_the_phoenix, half_blood_prince, deathly_hallows)
series <- tibble()
books
for (i in seq_along(titles)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]  %>%
unnest_tokens(word, text) %>%
mutate(book = titles[i]) %>%
)
for (i in seq_along(titles)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]  %>%
unnest_tokens(word, text) %>%
mutate(book = titles[i])
)
}
#books
for (i in seq_along(titles)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]  %>%
unnest_tokens(word, text) %>%
mutate(books = titles[i])
)
}
for (i in seq_along(titles)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]  %>%
unnest_tokens(word, text) %>%
mutate(books = title[i])
)
}
for (i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]  %>%
unnest_tokens(word, text) %>%
mutate(books = title[i])
)
}
for (i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]  %>%
unnest_tokens(word, text) %>%
mutate(books = title[i])
)
}
for (i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]  %>%
unnest_tokens(word, text) %>%
mutate(books = title[i])
)
}
for (i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]  %>%
)
for (i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]  %>%
)
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text) %>%
mutate(book = title[i]) %>%
select(book, everything())
series <- rbind(series, clean)
}
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text) %>%
}
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text) %>%
series <- rbind(series, clean)
}
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text)
series <- rbind(series, clean)
}
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text)
series <- rbind(series, clean)
}
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text)
series <- rbind(series, clean)
}
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text)
series <- rbind(series, clean)
}
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text)
series <- rbind(series, clean)
}
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text) %>%
mutate(book = titles[i])
series <- rbind(series, clean)
}
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text) %>%
mutate(book = titles[i])
select(book, everything())
series <- rbind(series, clean)
}
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text) %>%
mutate(book = titles[i])
select(book, everything())
series <- rbind(series, clean)
}
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text) %>%
mutate(book = title[i])
series <- rbind(series, clean)
}
series$book <- factor(series$book, levels = rev(titles))
series$book <- factor(series$book, levels = rev(title))
series
for(i in seq_along(title)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text) %>%
mutate(book = title[i]) %>%
select(book, everything())
series <- rbind(series, clean)
}
series$book <- factor(series$book, levels = rev(title))
series
series
head(order_of_the_phoenix[1])
#head(order_of_the_phoenix[1])
#(philosophers_stone[1])
series %>%
count(word, sort = TRUE)
series >%>
series >%>
series %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
series %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10)
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
mutate(book=factor(book, levels = title), text_order = nrow(.):1) %>%
plot(
gvisBarChart()
)
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
mutate(book=factor(book, levels = title), text_order = nrow(.):1)
)
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
)
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup()
)
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup()
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
mutate(book = factor(book, levels = titles), text_order = nrow(.):1)
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
mutate(book = factor(book, levels = title), text_order = nrow(.):1)
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
mutate(book = factor(book, levels = title), text_order = nrow(.):1)
ggplot(aes(reorder(word, text_order), n, fill = book)) +
geom_bar(stat = "identity") +
facet_wrap(~ book, scales = "free_y") +
labs(x = "NULL", y = "Frequency") + coord_flip() + theme(legend.position = "none")
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
mutate(book = factor(book, levels = title), text_order = nrow(.):1)
ggplot(aes(reorder(word, text_order), n, fill = book)) +
geom_bar(stat = "identity") +
facet_wrap(~ book, scales = "free_y") +
labs(x = "NULL", y = "Frequency") +
coord_flip() +
theme(legend.position="none")
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
mutate(book = factor(book, levels = title), text_order = nrow(.):1)
ggplot(aes(reorder(word, text_order), n, fill = book)) +
geom_bar(stat = "identity") +
facet_wrap(~ book, scales = "free_y") +
labs(x = "NULL", y = "Frequency") +
coord_flip() +
theme(legend.position="none")
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
mutate(book = factor(book, levels = title), text_order = nrow(.):1)
ggplot(aes(reorder(word, text_order), n, fill = book)) +
geom_bar(stat = "identity") +
facet_wrap(~ book, scales = "free_y") +
labs(x = "NULL", y = "Frequency") +
coord_flip() +
theme(legend.position="none")
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
mutate(book = factor(book, levels = titles),
text_order = nrow(.):1) %>%
ggplot(aes(reorder(word, text_order), n, fill = book)) +
geom_bar(stat = "identity") +
facet_wrap(~ book, scales = "free_y") +
labs(x = "NULL", y = "Frequency") +
coord_flip() +
theme(legend.position="none")
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
mutate(book = factor(book, levels = title),
text_order = nrow(.):1) %>%
ggplot(aes(reorder(word, text_order), n, fill = book)) +
geom_bar(stat = "identity") +
facet_wrap(~ book, scales = "free_y") +
labs(x = "NULL", y = "Frequency") +
coord_flip() +
theme(legend.position="none")
series %>%
anti_join(stop_words) %>%
group_by(book) %>%
count(word, sort = TRUE) %>%
top_n(10) %>%
ungroup() %>%
mutate(book = factor(book, levels = title),
text_order = nrow(.):1) %>%
ggplot(aes(reorder(word, text_order), n, fill = book)) +
geom_bar(stat = "identity") +
facet_wrap(~ book, scales = "free_y") +
labs(x = "NULL", y = "Frequency") +
coord_flip() +
theme(legend.position="none")
potter_pct <- series %>%
anti_join(stop_words) %>%
count(word) %>%
transmute(word, all_words = n / sum(n))
potter_pct <- series %>%
anti_join(stop_words) %>%
count(word) %>%
transmute(word, all_words = n / sum(n))
potter_pct
frequency <- series %>%
anti_join(stop_words) %>%
count(book, word) %>%
mutate(book_words = n / sum(n)) %>%
left_join(potter_pct) %>%
arrange(desc(book_words)) %>%
ungroup()
frequency
ggplot(frequency, aes(x = book_words, y = all_words, color = abs(all_words - book_words))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~ book, ncol = 2) +
theme(legend.position="none") +
labs(y = "Harry Potter Series", x = NULL)
ggplot(frequency, aes(x = book_words, y = all_words, color = abs(all_words - book_words))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~ book, ncol = 2) +
theme(legend.position="none") +
labs(y = "Harry Potter Series", x = NULL)
ggplot(frequency, aes(x = book_words, y = all_words, color = abs(all_words - book_words))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~ book, ncol = 2) +
theme(legend.position="none") +
labs(y = "Harry Potter Series", x = NULL)
ggplot(frequency, aes(x = book_words, y = all_words, color = abs(all_words - book_words))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~ book, ncol = 2) +
theme(legend.position="none") +
labs(y = "Harry Potter Series", x = NULL)
ggplot(frequency, aes(x = book_words, y = all_words, color = abs(all_words - book_words))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 5, width = 0.4, height = 0.7) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~ book, ncol = 2) +
theme(legend.position="none") +
labs(y = "Harry Potter Series", x = NULL)
ggplot(frequency, aes(x = book_words, y = all_words, color = abs(all_words - book_words))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 5, width = 0.7, height = 0.7) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = scales::percent_format()) +
scale_y_log10(labels = scales::percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~ book, ncol = 2) +
theme(legend.position="none") +
labs(y = "Harry Potter Series", x = NULL)
frequency %>%
group_by(book) %>%
summarize(correlation = cor(book_words, all_words),
p_value = cor.test(book_words, all_words)$p.value)
knitr::opts_chunk$set(echo = TRUE)
install.packages("babynames")
library("babynames")
dir("babynames")
applicants
babynames
lifetables
births
knitr::opts_chunk$set(echo = TRUE)
library(TheLordoftheRings)
texttb<- seq_along(TheLordoftheRings)
texttb<- seq_along(TheLordoftheRings)
texttb<- seq_along(TheLordoftheRings)
head(TheLordoftheRings)
head(TheLordoftheRings)
head(TheLordoftheRings)
head(TheLordoftheRings)
shiny::runApp('Lordofthering/thering')
install.packages("shinydashboard")
runApp('Lordofthering/thering')
